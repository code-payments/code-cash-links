// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file currency/v1/currency_service.proto (package code.currency.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message code.currency.v1.GetAllRatesRequest
 */
export class GetAllRatesRequest extends Message<GetAllRatesRequest> {
  /**
   * If timestamp is included, the returned rate will be the most recent available
   * exchange rate prior to the provided timestamp within the same day. If timestamp
   * is excluded, the current rate will be returned.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<GetAllRatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.currency.v1.GetAllRatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllRatesRequest {
    return new GetAllRatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllRatesRequest {
    return new GetAllRatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllRatesRequest {
    return new GetAllRatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllRatesRequest | PlainMessage<GetAllRatesRequest> | undefined, b: GetAllRatesRequest | PlainMessage<GetAllRatesRequest> | undefined): boolean {
    return proto3.util.equals(GetAllRatesRequest, a, b);
  }
}

/**
 * @generated from message code.currency.v1.GetAllRatesResponse
 */
export class GetAllRatesResponse extends Message<GetAllRatesResponse> {
  /**
   * @generated from field: code.currency.v1.GetAllRatesResponse.Result result = 1;
   */
  result = GetAllRatesResponse_Result.OK;

  /**
   * The time of the exchange rate.
   *
   * @generated from field: google.protobuf.Timestamp as_of = 2;
   */
  asOf?: Timestamp;

  /**
   * The price of 1 Kin in different currencies. Keyed on 3- or 4- letter lowercase currency code.
   *
   * @generated from field: map<string, double> rates = 3;
   */
  rates: { [key: string]: number } = {};

  constructor(data?: PartialMessage<GetAllRatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.currency.v1.GetAllRatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(GetAllRatesResponse_Result) },
    { no: 2, name: "as_of", kind: "message", T: Timestamp },
    { no: 3, name: "rates", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllRatesResponse {
    return new GetAllRatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllRatesResponse {
    return new GetAllRatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllRatesResponse {
    return new GetAllRatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllRatesResponse | PlainMessage<GetAllRatesResponse> | undefined, b: GetAllRatesResponse | PlainMessage<GetAllRatesResponse> | undefined): boolean {
    return proto3.util.equals(GetAllRatesResponse, a, b);
  }
}

/**
 * @generated from enum code.currency.v1.GetAllRatesResponse.Result
 */
export enum GetAllRatesResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * MISSING_DATA indicates no currency data is available for the requested timestamp.
   *
   * @generated from enum value: MISSING_DATA = 1;
   */
  MISSING_DATA = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetAllRatesResponse_Result)
proto3.util.setEnumType(GetAllRatesResponse_Result, "code.currency.v1.GetAllRatesResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "MISSING_DATA" },
]);

/**
 * @generated from message code.currency.v1.GetExchangeRateHistoryRequest
 */
export class GetExchangeRateHistoryRequest extends Message<GetExchangeRateHistoryRequest> {
  /**
   * ISO 4217 alpha-3 currency code (example: 'USD').
   *
   * @generated from field: string for_symbol = 5;
   */
  forSymbol = "";

  /**
   * The frequency of the samples in the data returned. The data will be
   * sampled into buckets if the underlying currency exchange
   * data is available for the range requested. If missing, there
   * could be gaps in the response.
   *
   * NOTE: the first record returned will be the current exchange rate and may not
   * align with the frequency selected.
   *
   * @generated from field: code.currency.v1.GetExchangeRateHistoryRequest.Interval interval = 2;
   */
  interval = GetExchangeRateHistoryRequest_Interval.RAW;

  /**
   * From timestamp (inclusive, in the past)
   *
   * @generated from field: google.protobuf.Timestamp start = 3;
   */
  start?: Timestamp;

  /**
   * Until timestamp (optional but must be in the future relative to the start
   * timestamp. If not provided the server  will default to "now")
   *
   * @generated from field: google.protobuf.Timestamp end = 4;
   */
  end?: Timestamp;

  constructor(data?: PartialMessage<GetExchangeRateHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.currency.v1.GetExchangeRateHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "for_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "interval", kind: "enum", T: proto3.getEnumType(GetExchangeRateHistoryRequest_Interval) },
    { no: 3, name: "start", kind: "message", T: Timestamp },
    { no: 4, name: "end", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExchangeRateHistoryRequest {
    return new GetExchangeRateHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExchangeRateHistoryRequest {
    return new GetExchangeRateHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExchangeRateHistoryRequest {
    return new GetExchangeRateHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetExchangeRateHistoryRequest | PlainMessage<GetExchangeRateHistoryRequest> | undefined, b: GetExchangeRateHistoryRequest | PlainMessage<GetExchangeRateHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GetExchangeRateHistoryRequest, a, b);
  }
}

/**
 * @generated from enum code.currency.v1.GetExchangeRateHistoryRequest.Interval
 */
export enum GetExchangeRateHistoryRequest_Interval {
  /**
   * Get the raw data stored by the database
   *
   * @generated from enum value: INTERVAL_RAW = 0;
   */
  RAW = 0,

  /**
   * Get hourly buckets of data (if it exists)
   *
   * @generated from enum value: INTERVAL_HOUR = 1;
   */
  HOUR = 1,

  /**
   * Get daily buckets of data (if it exists)
   *
   * @generated from enum value: INTERVAL_DAY = 2;
   */
  DAY = 2,

  /**
   * Get weekly buckets of data (if it exists)
   *
   * @generated from enum value: INTERVAL_WEEK = 3;
   */
  WEEK = 3,

  /**
   * Get monthly buckets of data (if it exists)
   *
   * @generated from enum value: INTERVAL_MONTH = 4;
   */
  MONTH = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(GetExchangeRateHistoryRequest_Interval)
proto3.util.setEnumType(GetExchangeRateHistoryRequest_Interval, "code.currency.v1.GetExchangeRateHistoryRequest.Interval", [
  { no: 0, name: "INTERVAL_RAW" },
  { no: 1, name: "INTERVAL_HOUR" },
  { no: 2, name: "INTERVAL_DAY" },
  { no: 3, name: "INTERVAL_WEEK" },
  { no: 4, name: "INTERVAL_MONTH" },
]);

/**
 * @generated from message code.currency.v1.GetExchangeRateHistoryResponse
 */
export class GetExchangeRateHistoryResponse extends Message<GetExchangeRateHistoryResponse> {
  /**
   * @generated from field: code.currency.v1.GetExchangeRateHistoryResponse.Result result = 1;
   */
  result = GetExchangeRateHistoryResponse_Result.OK;

  /**
   * @generated from field: repeated code.currency.v1.ExchangeRate items = 2;
   */
  items: ExchangeRate[] = [];

  constructor(data?: PartialMessage<GetExchangeRateHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.currency.v1.GetExchangeRateHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(GetExchangeRateHistoryResponse_Result) },
    { no: 2, name: "items", kind: "message", T: ExchangeRate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExchangeRateHistoryResponse {
    return new GetExchangeRateHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExchangeRateHistoryResponse {
    return new GetExchangeRateHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExchangeRateHistoryResponse {
    return new GetExchangeRateHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetExchangeRateHistoryResponse | PlainMessage<GetExchangeRateHistoryResponse> | undefined, b: GetExchangeRateHistoryResponse | PlainMessage<GetExchangeRateHistoryResponse> | undefined): boolean {
    return proto3.util.equals(GetExchangeRateHistoryResponse, a, b);
  }
}

/**
 * @generated from enum code.currency.v1.GetExchangeRateHistoryResponse.Result
 */
export enum GetExchangeRateHistoryResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: NOT_FOUND = 1;
   */
  NOT_FOUND = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetExchangeRateHistoryResponse_Result)
proto3.util.setEnumType(GetExchangeRateHistoryResponse_Result, "code.currency.v1.GetExchangeRateHistoryResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "NOT_FOUND" },
]);

/**
 * @generated from message code.currency.v1.ExchangeRate
 */
export class ExchangeRate extends Message<ExchangeRate> {
  /**
   * Rate of the currency in the base currency
   *
   * @generated from field: double rate = 2;
   */
  rate = 0;

  /**
   * The time for the exchange rate
   *
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<ExchangeRate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.currency.v1.ExchangeRate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 1, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeRate {
    return new ExchangeRate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeRate {
    return new ExchangeRate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeRate {
    return new ExchangeRate().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeRate | PlainMessage<ExchangeRate> | undefined, b: ExchangeRate | PlainMessage<ExchangeRate> | undefined): boolean {
    return proto3.util.equals(ExchangeRate, a, b);
  }
}

